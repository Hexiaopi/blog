(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{733:function(t,e,a){t.exports=a.p+"assets/img/digest.30045486.png"},818:function(t,e,a){"use strict";a.r(e);var s=a(11),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"认证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#认证"}},[t._v("#")]),t._v(" 认证")]),t._v(" "),s("blockquote",[s("p",[t._v("我们有多种途径来保障应用的安全，例如：网咯隔离、设置防火墙、设置IP黑名单等。而"),s("strong",[t._v("认证")]),t._v("是软件层面保护应用安全的一种措施。")]),t._v(" "),s("p",[t._v("当前有四种认证方式，分别是："),s("code",[t._v("Basic")]),t._v("、"),s("code",[t._v("Digest")]),t._v("、"),s("code",[t._v("OAuth")]),t._v("和"),s("code",[t._v("Bearer")])])]),t._v(" "),s("h3",{attrs:{id:"basic认证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic认证"}},[t._v("#")]),t._v(" Basic认证")]),t._v(" "),s("blockquote",[s("p",[t._v("Basic认证（基础认证）是一种简单的认证方式。将"),s("code",[t._v("用户名:密码")]),t._v("进行base64编码，放到HTTP Authorization Header中。")]),t._v(" "),s("p",[t._v("但是base64不是加密技术，入侵者可以通过截获base64字符串，并反编码获取用户名和密码；其次即便进行了加密了用户名和密码，入侵者可以通过加重放攻击。")])]),t._v(" "),s("p",[t._v("因此Basic认证非常不安全。在设计系统时，要遵循一个通用的原则：不要在请求参数中使用明文密码，也不要在任何存储中保存明文密码。")]),t._v(" "),s("h3",{attrs:{id:"digest认证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#digest认证"}},[t._v("#")]),t._v(" Digest认证")]),t._v(" "),s("blockquote",[s("p",[t._v("Digest认证（摘要认证）是一种HTTP认证协议，它与Basic认证兼容，但修复了Basic认证的严重缺陷。")])]),t._v(" "),s("p",[s("strong",[t._v("特点")])]),t._v(" "),s("ul",[s("li",[t._v("绝不会用明文的方式在网络上发送密码")]),t._v(" "),s("li",[t._v("可以有效防止恶意用户进行重放攻击")]),t._v(" "),s("li",[t._v("可以有效的防止对报文内容进行篡改")])]),t._v(" "),s("p",[t._v("摘要认证的过程如下图所示：\n"),s("img",{attrs:{src:a(733),alt:"digest"}})]),t._v(" "),s("ol",[s("li",[t._v("客户端请求服务端资源")]),t._v(" "),s("li",[t._v("在客户端能够证明它知道密码从而确认其身份之前，服务端认证失败，返回401 Unauthorized，并返回WWW-Authenticate头，里面包含认证需要的信息。")]),t._v(" "),s("li",[t._v("客户端根据WWW-Authenticate头中的信息，选择加密算法，并使用密码随机数"),s("code",[t._v("nonce")]),t._v("，计算出密码摘要"),s("code",[t._v("response")]),t._v("，并再次请求服务端。")]),t._v(" "),s("li",[t._v("服务器将客户端提供的密码摘要与服务器内部计算出的摘要进行对比。如果匹配，就说明客户端知道密码，认证通过，并返回一些与授权会话相关的附加信息，放在"),s("code",[t._v("Authorization-Info")]),t._v("中。")])]),t._v(" "),s("p",[t._v("其中涉及到的一些参数说明：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("参数")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("WWW-Authentication")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("用来定义使用何种方式（Basic、Digest、Bearer等）去进行认证以获取受保护的资源")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("username")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("用户名")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("realm")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("服务器返回的realm，一般是域名")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("method")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("HTTP请求方法")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("nonce")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("服务器发给客户端的随机字符串，会经常发生变化。客户端计算密码摘要时将其附加上去，使得多次生成同一用户的密码摘要各不相同，用来防止重放攻击")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("nc(nonceCount)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16进制数值，用于记录请求的次数，用于标记、计数，防止重放攻击")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("cnonce(clientNonce)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("客户端发送给服务器的随机字符串，用于客户端对服务器的认证")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("qop")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("保护质量参数，包含auth（默认）或auth-int（增加了报文完整性检测）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("uri")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("请求的uri")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("response")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("客户端根据算法算出的密码摘要值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Authorization-Info")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("用于返回一些与授权会话相关的附加信息")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("nextnonce")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("下一个服务端随机数，使客户端可以预先发送正确的摘要")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("rspauth")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("响应摘要，用于客户端对服务端进行认证")])])])]),t._v(" "),s("p",[t._v("摘要认证可以保护密码，比基本认证要安全的多，但摘要认证并不能保护内容，所以仍然要与HTTPS配合使用。")]),t._v(" "),s("h3",{attrs:{id:"oauth认证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oauth认证"}},[t._v("#")]),t._v(" OAuth认证")]),t._v(" "),s("blockquote",[s("p",[t._v("OAuth（开放授权）是一个开放的授权标准，允许用户让第三方应用访问该用户在某一Web服务上存储的私密资源（例如：照片、视频、音频等），而无需将用户名和密码提供给第三方应用。")])]),t._v(" "),s("p",[t._v("阮老师解释OAuth2.0非常形象，一看就懂\n"),s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2019/04/oauth_design.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth 2.0 的一个简单解释"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth 2.0 的四种方式"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2019/04/github-oauth.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub OAuth 第三方登录示例教程"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("OAuth当前是2.0版本，分为四种授权方式：密码式、隐藏式、凭借式和授权码模式。")]),t._v(" "),s("h4",{attrs:{id:"密码式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#密码式"}},[t._v("#")]),t._v(" 密码式")]),t._v(" "),s("p",[t._v("流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("网站A向用户发出获取用户名和密码的请求；")]),t._v(" "),s("li",[t._v("用户同意后，网站A凭借用户名和密码向网站B换取令牌；")]),t._v(" "),s("li",[t._v("网站B验证用户身份后，给出网站A令牌，网站A凭借令牌可以访问网站B对应权限的资源。、")])]),t._v(" "),s("p",[t._v("特点：用户需要高度信任网站A")]),t._v(" "),s("h4",{attrs:{id:"隐藏式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐藏式"}},[t._v("#")]),t._v(" 隐藏式")]),t._v(" "),s("p",[t._v("流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("A网站提供一个跳转到B网站的链接，用户点击后跳转至B网站，并向用户请求授权；")]),t._v(" "),s("li",[t._v("用户登录B网站，同意授权后，跳转回A网站指定的重定向redirect_url地址，并携带B网站返回的令牌，用户在B网站的数据给A网站使用。")])]),t._v(" "),s("p",[t._v("常见：适用于前端应用，例如公司内部应用集成SSO登录")]),t._v(" "),s("p",[t._v("特点：存在中间人攻击的风险，因此只能用于一些安全性要求不高的场景，并且令牌的有效时间要非常短。")]),t._v(" "),s("h4",{attrs:{id:"凭借式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#凭借式"}},[t._v("#")]),t._v(" 凭借式")]),t._v(" "),s("ol",[s("li",[t._v("应用A在命令行向应用B请求授权，此时应用A需要携带应用B提前颁发的secretID和secretKey，其中secretKey出于安全性考虑，需在后端发送；")]),t._v(" "),s("li",[t._v("应用B接收到secretID和secretKey，并进行身份验证，验证通过后返回给应用A令牌；")])]),t._v(" "),s("p",[t._v("常见：适用于没有前端的命令行应用")]),t._v(" "),s("h4",{attrs:{id:"授权码模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#授权码模式"}},[t._v("#")]),t._v(" 授权码模式")]),t._v(" "),s("p",[t._v("流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("A网站提供一个跳转到B网站的链接+redirect_url，用户点击后跳转至B网站；")]),t._v(" "),s("li",[t._v("用户携带B网站提前申请的client_id，向B网站发起身份验证请求；")]),t._v(" "),s("li",[t._v("用户登录B网站，通过验证，授予A网站权限，此时网站跳转回redirect_url，其中会有B网站通过验证后的授权码附在该url后；")]),t._v(" "),s("li",[t._v("网站A携带授权码向网站B请求令牌，网站B验证授权码后，返回令牌即acess_token；")])]),t._v(" "),s("h3",{attrs:{id:"bearer认证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bearer认证"}},[t._v("#")]),t._v(" Bearer认证")]),t._v(" "),s("blockquote",[s("p",[t._v("Bearer认证也称为令牌认证，是一种HTTP身份验证方法，Bearer认证的核心是bearer token。bearer token是一个加密字符串，通常由服务端根据秘钥生成。客户端在请求服务端时，必须在请求头中包含Authorization: Bearer "),s("code",[t._v("<token>")]),t._v("，服务端收到请求后，解析出token，并校验token的合法性。")])]),t._v(" "),s("p",[t._v("当前最流行的token编码方式是JSON Web Token(JWT)")]),t._v(" "),s("h4",{attrs:{id:"基于jwt的token认证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于jwt的token认证"}},[t._v("#")]),t._v(" 基于JWT的Token认证")]),t._v(" "),s("blockquote",[s("p",[t._v("JWT是Bearer Token的一个具体实现，由JSON数据格式组成，通过HASH散列算法生成一个字符串，该字符串可以用来进行授权和信息交换。")])]),t._v(" "),s("p",[t._v("流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("客户端使用用户名和密码请求登录。")]),t._v(" "),s("li",[t._v("服务端收到请求后，会去验证用户名和密码。如果用户名和密码跟数据库记录不一致，则验证失败；如果一致则验证通过，服务端会签发一个 Token 返回给客户端。")]),t._v(" "),s("li",[t._v("客户端收到请求后会将 Token 缓存起来，比如放在浏览器 Cookie 中或者 LocalStorage 中，之后每次请求都会携带该 Token。")]),t._v(" "),s("li",[t._v("服务端收到请求后，会验证请求中的 Token，验证通过则进行业务逻辑处理，处理完后返回处理后的结果")])]),t._v(" "),s("p",[t._v("JWT格式由三部分组成，分别是Header、Payload和Signature，它们之间用圆点.连接，例如：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2NDI4NTY2MzcsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MzUwODA2MzcsInN1YiI6ImFkbWluIn0.Shw27RKENE_2MVBq7-c8OmgYdF92UmdwS8xE-Fts2FM\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("Header")])]),t._v(" "),s("p",[t._v("包含两部分信息：一个是Token的类型，二是Token所使用的加密算法，例如：")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typ"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JWT"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"alg"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HS256"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("ul",[s("li",[t._v("typ：说明Token的类型；")]),t._v(" "),s("li",[t._v("alg: 说明Token的加密算法；")])]),t._v(" "),s("p",[t._v("将Header进行base64编码：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$ echo -n \'{"typ":"JWT","alg":"HS256"}\'|base64\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在某些场景下，可能还会有kid选项，用来标识一个秘钥ID，例如：")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"alg"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HS256"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"kid"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XhbY3aCrfjdYcP1OFJRu9xcno8JzSbUIvGE2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typ"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JWT"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("Payload")])]),t._v(" "),s("p",[t._v("有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。")]),t._v(" "),s("ul",[s("li",[t._v("iss: Issuer，JWT Token的签发者")]),t._v(" "),s("li",[t._v("exp: Expiration Time，JWT Token的过期时间")]),t._v(" "),s("li",[t._v("sub: Subject，主题")]),t._v(" "),s("li",[t._v("aud: Audience，一般可以为特定的App、服务或模块。服务端的安全策略再签发时和验证时，aud必须一致")]),t._v(" "),s("li",[t._v("iat: Issued At，JWT Token签发时间")]),t._v(" "),s("li",[t._v("nbf: Not Before，JWT Toekn生效时间")]),t._v(" "),s("li",[t._v("jti: JWT ID，令牌的唯一标识符，通常用于一次性消费的Token")])]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"aud"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iam.authz.marmotedu.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exp"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1604158987")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"iat"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1604151787")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"iss"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iamctl"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"nbf"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1604151787")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("将payload进行base64编码：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$ echo -n \'{"aud":"iam.authz.marmotedu.com","exp":1604158987,"iat":1604151787,"iss":"iamctl","nbf":1604151787}\'|base64\neyJhdWQiOiJpYW0uYXV0aHoubWFybW90ZWR1LmNvbSIsImV4cCI6MTYwNDE1ODk4NywiaWF0Ijox\nNjA0MTUxNzg3LCJpc3MiOiJpYW1jdGwiLCJuYmYiOjE2MDQxNTE3ODd9\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("这些预定义的字段并不要求强制使用，此外，我们还可以自定义私有字段，一般会把包含用户信息的数据放到payload中。注意，不要添加敏感信息，此外私有声明是客户端和服务端所共同定义的声明。")]),t._v(" "),s("p",[s("strong",[t._v("Signature")])]),t._v(" "),s("p",[t._v("Signature是Token的签名部分，通过如下方式生成：将 Header 和 Payload 分别 base64 编码后，用 . 连接。然后再使用 Header 中声明的加密方式，利用 secretKey 对连接后的字符串进行加密，加密后的字符串即为最终的 Signature。secretKey 是密钥，保存在服务器中，一般通过配置文件来保存。")]),t._v(" "),s("p",[t._v("签名后服务端会返回生成的 Token，客户端下次请求会携带该 Token。服务端收到 Token 后会解析出 header.payload，然后用相同的加密算法和密钥对 header.payload 再进行一次加密，例如：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('HMACSHA256(base64UrlEncode(header)+"."+base64UrlEncode(payload),secret)\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("得到 Signature。并且，对比加密后的 Signature 和收到的 Signature 是否相同，如果相同则验证通过，不相同则返回 HTTP 401 Unauthorized 的错误。")])])}),[],!1,null,null,null);e.default=n.exports}}]);